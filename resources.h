#ifndef LL1_H
#define LL1_H

/******************************** Shared Resources ********************************/
// Keywords Table
static const char* keywords[14] = {
    "and",       // Keyword 1
	"def",       // Keyword 2
    "do",        // Keyword 3
    "else",      // Keyword 4
	"fed",       // Keyword 5
    "fi",        // Keyword 6
    "if",        // Keyword 7
	"not",       // Keyword 8
    "od",        // Keyword 9
    "or",        // Keyword 10
    "print",     // Keyword 11
    "return",    // Keyword 12
    "then",      // Keyword 13
    "while"      // Keyword 14
};

// State table for lexical analysis
const char *state_tokens[18] = {
    "START",       // state 0
    "GT",          // state 1
    "GTE",         // state 2
    "LT",          // state 3
    "LTE",         // state 4
    "NEQ",         // state 5
    "OP",          // state 6
    "EQ",          // state 7
    "OP",          // state 8
    "ID/KEYWORD",  // state 9
    "ID",          // state 10
    "OP",          // state 11
    "NUMBER",      // state 12, integer
    "N/A",         // state 13
    "NUMBER",      // state 14, double
    "N/A",         // state 15
    "N/A",         // state 16
    "NUMBER"       // state 17, double
};

// Assigns each token a specific value, used for syntax analysis get_terminal() function
const char* tokens[10] = {
    "EQ",          // token 1
    "GT",          // token 2
    "GTE",         // token 3
    "ID",          // token 4
    "KEYWORD",     // token 5
    "LT",          // token 6
    "LTE",         // token 7
    "NEQ",         // token 8
    "NUMBER",      // token 9
    "OP"           // token 10
};


// Production variables table used for printing syntax symbol table
char* prod_var[33]= {
	"<progs>",
	"<fdecls>",
	"<fdec>",
	"<params>",
	"<params'>",
	"<fname>",
	"<declarations>",
	"<decl>",
	"<type>",
	"<var_list>",
	"<var_list'>",
	"<statement_seq>",
	"<statement_seq'>",
	"<statement>",
	"<statement'>",
	"<expr_seq>",
	"<expr_seq'>",
	"<factor>",
	"<factor'>",
    "<pm_expr>",
	"<pm_expr'>",
	"<term>",
	"<term'>",
	"<comp_expr>",
	"<comp_expr'>",
	"<bterm>",
	"<bterm'>",
	"<expr>",
	"<expr'>",
	"<comp>",
	"<var>",
	"<var'>",
	"<number>"
};

// Production terminals table used for printing syntax symbol table
char* prod_term[38] = {
	"def",
	"fed",
	"<id>",
	"<id>(int)",
	"<id>(double)",
	"if",
	"then",
	"else",
	"fi",
	"while",
	"do",
	"od",
	"print",
	"return",
	"<",
	"<=",
	"==",
	">",
	">=",
	"<>",
	"=",
	"[",
	"]",
	"(",
	")",
	";",
	",",
	"<number>(int)",
	"<number>(double)",
	"+",
	"-",
	"*",
	"/",
	"%",
	"or",
	"and",
	"not",
	"Epsilon"
};

/******************************** Lexical Resources ********************************/
#define NUM_STATES 18
#define NUM_CHARACTERS 128

// Transition table definition
int transition_table[NUM_CHARACTERS][NUM_STATES] = {
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 0
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 1
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 2
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 3
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 4
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 5
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 6
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 7
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 8
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1,-1, 0}, // Ascii 9
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1,-1, 0}, // Ascii 10
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 11
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 12
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 13
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 14
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 15
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 16
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 17
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 18
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 19
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 20
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 21
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 22
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 23
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 24
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 25
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 26
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 27
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 28
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 29
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 30
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 31
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1,-1, 0}, // Ascii 32
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 33
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 34
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 35
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 36
	{ 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1,-1, 0}, // Ascii 37
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 38
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 39
	{ 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1,-1, 0}, // Ascii 40
	{ 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1,-1, 0}, // Ascii 41
	{ 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1,-1, 0}, // Ascii 42
	{11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,16,-1, 0}, // Ascii 43
	{ 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1,-1, 0}, // Ascii 44
	{11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,16,-1, 0}, // Ascii 45
	{-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,13,-1, 0,-1,-1, 0}, // Ascii 46
	{ 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1,-1, 0}, // Ascii 47
	{12, 0, 0, 0, 0, 0, 0, 0, 0,10,10,12,12,14,14,17,17,17}, // Ascii 48
	{12, 0, 0, 0, 0, 0, 0, 0, 0,10,10,12,12,14,14,17,17,17}, // Ascii 49
	{12, 0, 0, 0, 0, 0, 0, 0, 0,10,10,12,12,14,14,17,17,17}, // Ascii 50
	{12, 0, 0, 0, 0, 0, 0, 0, 0,10,10,12,12,14,14,17,17,17}, // Ascii 51
	{12, 0, 0, 0, 0, 0, 0, 0, 0,10,10,12,12,14,14,17,17,17}, // Ascii 52
	{12, 0, 0, 0, 0, 0, 0, 0, 0,10,10,12,12,14,14,17,17,17}, // Ascii 53
	{12, 0, 0, 0, 0, 0, 0, 0, 0,10,10,12,12,14,14,17,17,17}, // Ascii 54
	{12, 0, 0, 0, 0, 0, 0, 0, 0,10,10,12,12,14,14,17,17,17}, // Ascii 55
	{12, 0, 0, 0, 0, 0, 0, 0, 0,10,10,12,12,14,14,17,17,17}, // Ascii 56
	{12, 0, 0, 0, 0, 0, 0, 0, 0,10,10,12,12,14,14,17,17,17}, // Ascii 57
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 58
	{ 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1,-1, 0}, // Ascii 59
	{ 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1,-1, 0}, // Ascii 60
	{ 6, 2, 0, 4, 0, 0, 7, 0, 0, 0, 0, 0, 0,-1, 0,-1,-1, 0}, // Ascii 61
	{ 1, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1,-1, 0}, // Ascii 62
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 63
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 64
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 65
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 66
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 67
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 68
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,15,-1,15,-1,-1,-1}, // Ascii 69
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 70
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 71
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 72
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 73
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 74
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 75
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 76
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 77
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 78
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 79
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 80
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 81
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 82
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 83
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 84
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 85
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 86
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 87
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 88
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 89
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 90
	{ 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1,-1, 0}, // Ascii 91
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 92
	{ 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1,-1, 0}, // Ascii 93
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 94
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 95
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 96
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 97
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 98
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 99
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 100
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,15,-1,15,-1,-1,-1}, // Ascii 101
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 102
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 103
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 104
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 105
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 106
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 107
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 108
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 109
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 110
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 111
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 112
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 113
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 114
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 115
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 116
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 117
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 118
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 119
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 120
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 121
	{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 9,10, 0,-1,-1,-1,-1,-1,-1}, // Ascii 122
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 123
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 124
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 125
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 126
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // Ascii 127
};


/******************************** Syntax Resources ********************************/
#define NUM_PRODUCTIONS 33
#define NUM_TERMINALS 38
// Left to right, Look ahead 1 parsing table 
int ll1_table[NUM_TERMINALS][NUM_PRODUCTIONS] = {

	// Production Variables
//    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32   
	{ 0,  1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1},            // Terminal: 0  = def
	{-1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 17, 19, 25, -1, 29, 31, -1, 36, -1, -1, -1, 45, -1, -1, -1, 51, -1, 55, -1, -1, -1, -1},            // Terminal: 1  = fed
	{ 0,  2, -1, -1, -1,  8, 10, -1, -1, 14, -1, 17, 19, 21, -1, 28, -1, 32, -1, 37, -1, 42, -1, 46, -1, 49, -1, 52, -1, -1, 62, -1, -1},            // Terminal: 2  = id
	{ 0,  2, -1,  4, -1, -1,  9, 11, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},            // Terminal: 3  = id(int)
	{ 0,  2, -1,  4, -1, -1,  9, 11, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},            // Terminal: 4  = id(double)
	{ 0,  2, -1, -1, -1, -1, 10, -1, -1, -1, -1, 17, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},            // Terminal: 5  = if
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, 41, -1, 45, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1},            // Terminal: 6  = then
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 19, 25, 27, 29, 31, -1, 36, -1, 41, -1, 45, -1, 48, -1, 51, -1, 55, -1, -1, -1, -1},            // Terminal: 7  = else
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 19, 25, 26, 29, 31, -1, 36, -1, 41, -1, 45, -1, 48, -1, 51, -1, 55, -1, -1, -1, -1},            // Terminal: 8  = fi
	{ 0,  2, -1, -1, -1, -1, 10, -1, -1, -1, -1, 17, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},            // Terminal: 9  = while
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, 41, -1, 45, -1, 48, -1, -1, -1, 55, -1, -1, -1, -1},            // Terminal: 10 = do
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 19, 25, -1, 29, 31, -1, 36, -1, 41, -1, 45, -1, 48, -1, 51, -1, -1, -1, -1, -1, -1},            // Terminal: 11 = od
	{ 0,  2, -1, -1, -1, -1, 10, -1, -1, -1, -1, 17, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},            // Terminal: 12 = print
	{ 0,  2, -1, -1, -1, -1, 10, -1, -1, -1, -1, 17, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},            // Terminal: 13 = return
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, 41, -1, 45, -1, 47, -1, -1, -1, -1, 56, -1, -1, -1},            // Terminal: 14 = lt: <
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, 41, -1, 45, -1, 47, -1, -1, -1, -1, 57, -1, -1, -1},            // Terminal: 15 = lte: <=
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, 41, -1, 45, -1, 47, -1, -1, -1, -1, 58, -1, -1, -1},            // Terminal: 16 = is_equal: ==
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, 41, -1, 45, -1, 47, -1, -1, -1, -1, 59, -1, -1, -1},            // Terminal: 17 = gt: >
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, 41, -1, 45, -1, 47, -1, -1, -1, -1, 60, -1, -1, -1},            // Terminal: 18 = gte: >=
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, 41, -1, 45, -1, 47, -1, -1, -1, -1, 61, -1, -1, -1},            // Terminal: 19 = not_equal: <>
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1},            // Terminal: 20 = assignment: =
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1},            // Terminal: 21 = LsqB: [
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, 31, -1, 36, -1, 41, -1, 45, -1, 48, -1, 51, -1, 55, -1, -1, -1, -1},            // Terminal: 22 = RsqB: ]
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, 34, 35, 37, -1, 42, -1, 46, -1, 49, -1, 52, -1, -1, -1, -1, -1},            // Terminal: 23 = LBr: (
	{-1, -1, -1,  5,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, 31, -1, 36, -1, 41, -1, 45, -1, 48, -1, 51, -1, 55, -1, -1, 64, -1},            // Terminal: 24 = RBr: )
	{ 0, -1, -1, -1, -1, -1, 10, -1, -1, -1, 16, 17, 18, 25, -1, 29, 31, -1, 36, -1, 41, -1, 45, -1, 48, -1, 51, -1, 55, -1, -1, 64, -1},            // Terminal: 25 = Semi: ;
	{-1, -1, -1, -1,  6, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, 30, -1, 36, -1, 41, -1, 45, -1, 48, -1, 51, -1, 55, -1, -1, 64, -1},            // Terminal: 26 = comma: ,
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, 33, -1, 37, -1, 42, -1, 46, -1, 49, -1, 52, -1, -1, -1, -1, 65},            // Terminal: 27 = num(int)
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, 33, -1, 37, -1, 42, -1, 46, -1, 49, -1, 52, -1, -1, -1, -1, 66},            // Terminal: 28 = num(double)
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, 41, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},            // Terminal: 29 = plus: +
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, 41, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},            // Terminal: 30 = minus: -
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},            // Terminal: 31 = mult: *
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},            // Terminal: 32 = div: /
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},            // Terminal: 33 = mod: %
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, 41, -1, 45, -1, 48, -1, 50, -1, -1, -1, -1, -1, -1},            // Terminal: 34 = or
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, 41, -1, 45, -1, 48, -1, 51, -1, 54, -1, -1, -1, -1},            // Terminal: 35 = and
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1},            // Terminal: 36 = not
	{ 0,  2, -1, -1, -1, -1, 10, -1, -1, -1, -1, 17, 19, 25, -1, 29, 31, -1, 36, -1, 41, -1, 45, -1, 48, -1, 51, -1, 55, -1, -1, -1, -1}             // Terminal: 37 = $
};

int prod_0[4] = {3, -1, -6, -11};                          // Production # 0
int prod_1[4] = {3, -2, 25, -1};                           // Production # 1
int prod_2[2] = {1, 37};                                   // Production # 2
int prod_3[10] = {9, 0, -8, -5, 23, -3, 24, -6, -11, 1};   // Production # 3
int prod_4[4] = {3, -8, -30, -4};                          // Production # 4
int prod_5[2] = {1, 37};                                   // Production # 5
int prod_6[3] = {2, 26, -3};                               // Production # 6
int prod_7[2] = {1, 37};                                   // Production # 7
int prod_8[2] = {1, 2};                                    // Production # 8
int prod_9[4] = {3, -7, 25 , -6};                          // Production # 9
int prod_10[2] = {1, 37};                                  // Production # 10
int prod_11[3] = {2, -8, -9};                              // Production # 11
int prod_12[2] = {1, 3};                                   // Production # 12
int prod_13[2] = {1, 4};                                   // Production # 13
int prod_14[3] = {2, -30, -10};                            // Production # 14
int prod_15[3] = {2, 26, -9};                              // Production # 15
int prod_16[2] = {1, 37};                                  // Production # 16
int prod_17[3] = {2, -13, -12};                            // Production # 17
int prod_18[3] = {2, 25, -11};                             // Production # 18
int prod_19[2] = {1, 37};                                  // Production # 19
int prod_20[8] = {7, 5, 23, -27, 24, 6, -11, -14};         // Production # 20
int prod_21[4] = {3, -30, 20, -27};                        // Production # 21
int prod_22[8] = {7, 9, 23, -27, 24, 10, -11, 11};         // Production # 22
int prod_23[3] = {2, 12, -27};                             // Production # 23
int prod_24[3] = {2, 13, -27};                             // Production # 24
int prod_25[2] = {1, 37};                                  // Production # 25
int prod_26[2] = {1, 8};                                   // Production # 26
int prod_27[4] = {3, 7, -11, 8};                           // Production # 27
int prod_28[3] = {2, -27, -16};                            // Production # 28
int prod_29[2] = {1, 37};                                  // Production # 29
int prod_30[4] = {3, 26, -27, -16};                        // Production # 30
int prod_31[2] = {1, 37};                                  // Production # 31
int prod_32[3] = {2, 2, -18};                              // Production # 32
int prod_33[2] = {1, -32};                                 // Production # 33
int prod_34[4] = {3, 23, -27, 24};                         // Production # 34
int prod_35[4] = {3, 23, -15, 24};                         // Production # 35
int prod_36[2] = {1, 37};                                  // Production # 36
int prod_37[3] = {2, -17, -20};                            // Production # 37
int prod_38[4] = {3, 31, -17, -20};                        // Production # 38
int prod_39[4] = {3, 32, -17, -20};                        // Production # 39
int prod_40[4] = {3, 33, -17, -20};                        // Production # 40
int prod_41[2] = {1, 37};                                  // Production # 41
int prod_42[3] = {2, -19, -22};                            // Production # 42
int prod_43[4] = {3, 29, -19, -22};                        // Production # 43
int prod_44[4] = {3, 30, -19, -22};                        // Production # 44
int prod_45[2] = {1, 37};                                  // Production # 45
int prod_46[3] = {2, -21, -24};                            // Production # 46
int prod_47[3] = {2, -29, -21};                            // Production # 47
int prod_48[2] = {1, 37};                                  // Production # 48
int prod_49[3] = {2, -23, -26};                            // Production # 49
int prod_50[4] = {3, 34, -23, -26};                        // Production # 50
int prod_51[2] = {1, 37};                                  // Production # 51
int prod_52[3] = {2, -25, -28};                            // Production # 52
int prod_53[3] = {2, 36, -27};                             // Production # 53
int prod_54[4] = {3, 35, -25, -28};                        // Production # 54
int prod_55[2] = {1, 37};                                  // Production # 55
int prod_56[2] = {1, 14};                                  // Production # 56
int prod_57[2] = {1, 15};                                  // Production # 57
int prod_58[2] = {1, 16};                                  // Production # 58
int prod_59[2] = {1, 17};                                  // Production # 59
int prod_60[2] = {1, 18};                                  // Production # 60
int prod_61[2] = {1, 19};                                  // Production # 61
int prod_62[3] = {2, 2, -31};                              // Production # 62
int prod_63[4] = {3, 21, -27, 22};                         // Production # 63
int prod_64[2] = {1, 37};                                  // Production # 64
int prod_65[2] = {1, 27};                                  // Production # 65
int prod_66[2] = {1, 28};                                  // Production # 66


// Productions together in one jagged array
int* productions[67] = {
	prod_0, 
	prod_1, 
	prod_2, 
	prod_3, 
	prod_4, 
	prod_5, 
	prod_6, 
	prod_7, 
	prod_8, 
	prod_9,
	prod_10,
	prod_11,
	prod_12,
	prod_13,
	prod_14,
	prod_15,
	prod_16,
	prod_17,
	prod_18,
	prod_19,
	prod_20,
	prod_21,
	prod_22,
	prod_23,
	prod_24,
	prod_25,
	prod_26,
	prod_27,
	prod_28,
	prod_29,
	prod_30,
	prod_31,
	prod_32,
	prod_33,
	prod_34,
	prod_35,
	prod_36,
	prod_37,
	prod_38,
	prod_39,
	prod_40,
	prod_41,
	prod_42,
	prod_43,
	prod_44,
	prod_45,
	prod_46,
	prod_47,
	prod_48,
	prod_49,
	prod_50,
	prod_51,
	prod_52,
	prod_53,
	prod_54,
	prod_55,
	prod_56,
	prod_57,
	prod_58,
	prod_59,
	prod_60,
	prod_61,
	prod_62,
	prod_63,
	prod_64,
	prod_65,
	prod_66
};

#endif // LL1_H